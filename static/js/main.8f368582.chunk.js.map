{"version":3,"sources":["components/Menu.js","pages/Home.js","pages/About.js","pages/Cart.js","pages/ThankYou.js","pages/Checkout.js","AppRoutes.js","App.js","serviceWorker.js","index.js"],"names":["menu","name","route","NavMenu","react_default","a","createElement","map","item","index","key","concat","href","Home","About","Cart","ThankYou","Checkout","AppRoutes","BrowserRouter","basename","process","Route","path","exact","component","App","className","Menu","src_AppRoutes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAEMA,EAAO,CACX,CACEC,KAAM,OACNC,MAAO,KAET,CACED,KAAM,OACNC,MAAO,SAET,CACED,KAAM,WACNC,MAAO,aAET,CACED,KAAM,QACNC,MAAO,UAoBIC,EAhBC,WACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAEIN,EAAKO,IAAI,SAACC,EAAMC,GAAP,OACPL,EAAAC,EAAAC,cAAA,MAAII,IAAG,QAAAC,OAAUF,IACfL,EAAAC,EAAAC,cAAA,KAAGM,KAAMJ,EAAKN,OAAQM,EAAKP,oCCxB1BY,EAFF,kBAAOT,EAAAC,EAAAC,cAAA,mBCELQ,EAFD,kBAAOV,EAAAC,EAAAC,cAAA,oBCENS,EAFF,kBAAOX,EAAAC,EAAAC,cAAA,mBCELU,EAFE,kBAAOZ,EAAAC,EAAAC,cAAA,yBCITW,EAJE,WACf,OAAQb,EAAAC,EAAAC,cAAA,uBCyBKY,EAjBG,WAChB,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAeC,SAAUC,sBAEvBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWZ,IACjCT,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWX,IACjCV,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,KAAK,cAAcE,UAAWT,IACrCZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,KAAK,aAAaE,UAAWR,IACpCb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWV,OCHzBW,mLATX,OACEtB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,cALUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f368582.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst menu = [\r\n  {\r\n    name: 'Home',\r\n    route: '/'\r\n  },\r\n  {\r\n    name: 'Cart',\r\n    route: '/cart'\r\n  },\r\n  {\r\n    name: 'Checkout',\r\n    route: '/checkout'\r\n  },\r\n  {\r\n    name: 'About',\r\n    route: '/cart'\r\n  }\r\n];\r\n\r\nconst NavMenu = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {\r\n          menu.map((item, index) => (\r\n            <li key={`menu-${index}`}>\r\n              <a href={item.route}>{item.name}</a>\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;","import React from 'react'\r\n\r\nconst Home = () =>  <h2>Home</h2>;\r\n\r\nexport default Home;","import React from 'react'\r\n\r\nconst About = () =>  <h2>About</h2>;\r\n\r\nexport default About;","import React from 'react'\r\n\r\nconst Cart = () =>  <h2>Cart</h2>;\r\n\r\nexport default Cart;","import React from 'react'\r\n\r\nconst ThankYou = () =>  <h2>Thank You!</h2>;\r\n\r\nexport default ThankYou;","import React from 'react';\r\n\r\nconst Checkout = () => {\r\n  return (<h2>Checkout</h2>)\r\n};\r\n\r\nexport default Checkout;","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport {\r\n  Home,\r\n  About,\r\n  ThankYou,\r\n  Cart,\r\n  Checkout,\r\n  //NoMatch\r\n} from './pages';\r\n\r\nconst AppRoutes = () => {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n\r\n      <div>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/about/\" component={About} />\r\n        <Route path=\"/thank-you/\" component={ThankYou} />\r\n        <Route path=\"/checkout/\" component={Checkout} />\r\n        <Route path=\"/cart/\" component={Cart} />\r\n        {/*<Route component={NoMatch} />*/}\r\n      </div>\r\n\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default AppRoutes;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport NavMenu from './components/Menu';\nimport './App.css';\nimport AppRoutes from './AppRoutes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavMenu/>\n        <AppRoutes/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}